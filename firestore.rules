
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check for Admin or Gestor role
    function isInternalUser(userId) {
      let userRole = get(/databases/$(database)/documents/users/$(userId)).data.role;
      return userRole == 'Admin' || userRole == 'Gestor';
    }

    // --- USER-FACING COLLECTIONS ---

    // PUBLIC: Anyone can view published products
    match /products/{productId} {
      allow get: if resource.data.status == 'Publicado';
      allow list: if request.query.offset == null || request.query.offset == 0; // Allow public listing
      
      // Internal users can manage products
      allow write: if request.auth != null && isInternalUser(request.auth.uid);
    }

    // CLIENTS: Users can manage their own data
    match /users/{userId} {
      allow get, update: if request.auth.uid == userId;
      // Anyone can create a user account (register)
      allow create: if request.auth.uid == userId;
      // Admins can view or delete any user
      allow list, delete: if request.auth != null && isInternalUser(request.auth.uid);
    }

    match /requests/{requestId} {
      // A user can read their own requests
      allow get: if request.auth.uid == resource.data.userId;
      // Allow a user to LIST requests only if they are querying for their OWN requests
      allow list: if request.auth.uid != null && request.query.where[0][1] == 'userId' && request.query.where[0][2] == request.auth.uid;
      
      // Internal users can manage all requests
      allow read, write: if request.auth != null && isInternalUser(request.auth.uid);
    }
    
    match /equipment/{equipmentId} {
       // A user can read their own equipment
      allow get: if request.auth.uid == resource.data.userId;
      allow list: if request.auth.uid != null && request.query.where[0][1] == 'userId' && request.query.where[0][2] == request.auth.uid;

      // Internal users can manage all equipment
      allow read, write: if request.auth != null && isInternalUser(request.auth.uid);
    }

    match /payments/{paymentId} {
       // A user can read their own payments
      allow get: if request.auth.uid == resource.data.userId;
      allow list: if request.auth.uid != null && request.query.where[0][1] == 'userId' && request.query.where[0][2] == request.auth.uid;

      // Internal users can manage all payments
      allow read, write: if request.auth != null && isInternalUser(request.auth.uid);
    }
  }
}
