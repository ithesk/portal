
rules_version = '2';

service cloud.firestore {
  match /databases/alzadatos/documents {

    // Allow public read of a specific verification document if you know the ID.
    // This is secure because the document ID is a long, unguessable string.
    match /verifications/{verificationId} {
      allow read: if true;
      allow write: if request.auth != null; // Only authenticated users (like cloud functions) can write.
    }

    // Users can only read/write their own user document.
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Authenticated users can create requests.
    // They can only read/update/delete their own requests.
    match /requests/{requestId} {
      allow create: if request.auth != null;
      allow read, update, delete: if request.auth != null && request.resource.data.userId == request.auth.uid;
    }

    // Similar rules for payments and equipment
    match /payments/{paymentId} {
       allow create: if request.auth != null;
       allow read, update, delete: if request.auth != null && request.resource.data.userId == request.auth.uid;
    }

    match /equipment/{equipmentId} {
        allow create: if request.auth != null;
        allow read, update, delete: if request.auth != null && request.resource.data.userId == request.auth.uid;
    }
    
    // Products are public to read for anyone. Only auth users (internal) can write.
    match /products/{productId} {
        allow read: if true;
        allow write: if request.auth != null;
    }

    // --- Internal Admin Rules ---
    // Allow internal users (gestor, admin) to perform actions.
    // This assumes internal users have a specific role in their user document.
    match /users/{userId} {
      allow list: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['Admin', 'Gestor'];
    }
    
    match /requests/{requestId} {
        allow list, read, update: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['Admin', 'Gestor'];
    }

    match /payments/{paymentId} {
       allow list, read, write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['Admin', 'Gestor'];
    }

    match /equipment/{equipmentId} {
        allow list, read, write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['Admin', 'Gestor'];
    }
  }
}
