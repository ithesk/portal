
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isInternalUser() {
      // Check if the user making the request has the role of 'Admin' or 'Gestor'
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['Admin', 'Gestor'];
    }

    function isOwner(userId) {
      // Check if the authenticated user's ID matches the document's userId
      return request.auth.uid == userId;
    }
    
    // VERIFICATIONS: Allow anyone to get a specific verification doc and update it only with the selfieUrl.
    match /verifications/{verificationId} {
      allow get: if true;
      allow update: if request.resource.data.selfieUrl != resource.data.selfieUrl;
      // Write and delete only for internal users (for cleanup, etc)
      allow write, delete: if request.auth != null && isInternalUser();
    }

    // USERS: Users can read/write their own data. Internal users can manage all users.
    match /users/{userId} {
      allow read, write: if isOwner(userId);
      allow list, create: if request.auth != null && isInternalUser();
    }

    // PRODUCTS: Public can read, only internal users can modify.
    match /products/{productId} {
        allow get, list: if true;
        allow write, create, delete: if request.auth != null && isInternalUser();
    }
    
    // REQUESTS: Users can read their own requests. Internal users can manage all.
    match /requests/{requestId} {
        allow create: if request.auth != null; // Any authenticated user can create
        allow read, write: if (request.auth != null && isOwner(resource.data.userId)) || (request.auth != null && isInternalUser());
        allow list: if request.auth != null && isInternalUser();
    }

    // EQUIPMENT & PAYMENTS: Users can read their own. Internal users can manage all.
    match /equipment/{equipmentId} {
       allow read: if (request.auth != null && isOwner(resource.data.userId)) || (request.auth != null && isInternalUser());
       allow write, create, list: if request.auth != null && isInternalUser();
    }

    match /payments/{paymentId} {
       allow read: if (request.auth != null && isOwner(resource.data.userId)) || (request.auth != null && isInternalUser());
       allow write, create, list: if request.auth != null && isInternalUser();
    }
  }
}
