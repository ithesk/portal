
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the user is the owner of the document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Helper function to check if the user is an Admin or Gestor
    function isInternalUser() {
      return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['Admin', 'Gestor'];
    }

    // --- Public Access Rules ---
    match /products/{productId} {
      allow read: if true;
    }

    // --- Client/User Access Rules ---

    // Users can read/update their own user document.
    // New users can be created during registration.
    match /users/{userId} {
      allow read, update: if isOwner(userId);
      allow create: if isAuthenticated();
    }

    // Users can read their own equipment.
    // Internal users can manage all equipment records.
    match /equipment/{equipmentId} {
      allow read: if isOwner(resource.data.userId) || isInternalUser();
      allow create, update: if isInternalUser();
    }
    
    // Users can read their own payments.
    // Internal users can manage all payments.
    match /payments/{paymentId} {
      allow read: if isOwner(resource.data.userId) || isInternalUser();
       allow create, update: if isInternalUser();
    }

    // This is more complex. A user needs to see requests matching their cedula,
    // which is stored in their user document. This rule structure allows that.
    // Internal users can manage all requests.
    match /requests/{requestId} {
      allow read: if (isAuthenticated() && resource.data.cedula == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.cedula) || isInternalUser();
      allow create, update: if isInternalUser();
    }

    // --- Default Deny ---
    // Make sure to have a default deny rule if not explicitly covered above.
    // This is implicitly handled by Firestore, but being explicit can be clearer.
    // match /{document=**} {
    //   allow read, write: if false;
    // }
  }
}
